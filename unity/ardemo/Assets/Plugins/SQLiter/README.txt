SQLiter


------------------------------
Changelog
------------------------------
v 1.0.0:
- Initial release

v 1.1.0:
- Something magical I am sure

v 1.2.0
- Updated to latest SQLite version
- Added new example case
- Fixed bug in example code
- Moved files to plugins folder to work with Android builds

v 2.0.0
- Added .so DLLs for Android compilation / use
- Updated other DLLs / added appropriate folders
- changed some variable names
- changed when the database path is determined to Awake() method as Unity 5.4 complained about initializing stuff before scene is loaded
- changed default location of database create along with some better comments as to what is happening
- added more/better 'important information'
- changed the test coroutine to wait 3 seconds instead of 1, as 1 second was not enough time for SQLite to initialize

------------------------------
Important Information
------------------------------
1. Read the setup
2. Realize you MUST wait for SQLite to initialize before you do anything.  How you want to do this is up to you: delegate, static boolean, timing, etc.
3. Filename Location of the Database:
	- during builds, this is located in the project root - same level as Assets/Library/obj/ProjectSettings
	- during runtime (Windows at least), this is located in the SAME directory as the executable
	- you can play around with the path if you like, but build-vs-run locations need to be taken into account

4. If you want to update the DLLs or replace them, go to: https://sqlite.org/download.html
5. If you're on a version of Unity that DOES NOT deploy the appropriate DLLs into the build, copy the correct DLL file into the same directory as the .exe

!!!!! 
The Andoid .so files were a "best guess" by me, as I do not have an adroid device to test with
If you think they are wrong, download the .aar package for Android from the sqlite downloads, extract package (via 7zip or other program), and replace with correct DLL


------------------------------
Setup
------------------------------
1. Import Package
2. Create Empty GameObject in Scene
	2a.  Add SQLiter.cs script to gameobject
3. Create Empty GameObject in Scene
	3a.  Add LoomManager.cs script to gameobject
4. Run.  SQLiter will have created a SQLite DB in the Assets/SQLiter/Databases folder.

From here you can delete the DB if you like.  Edit the SQLiter.cs file, view
the way it saves/updates/inserts values, deletes items, queries stuff, how to use
the LoomManager for multithreading, etc.  This is just a template of how to set things
up, along with the necessary .DLLs and basic code.  It's hardly an advanced view of things,
but the initial setup has been done.  It takes effort, but it's free.

------------------------------
SQLite Copyright
------------------------------
All of the code and documentation in SQLite has been dedicated to the public domain by the authors. All code authors, and representatives of the companies they work for, have signed affidavits dedicating their contributions to the public domain and originals of those signed affidavits are stored in a firesafe at the main offices of Hwaci. Anyone is free to copy, modify, publish, use, compile, sell, or distribute the original SQLite code, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.

The previous paragraph applies to the deliverable code and documentation in SQLite - those parts of the SQLite library that you actually bundle and ship with a larger application. Some scripts used as part of the build process (for example the "configure" scripts generated by autoconf) might fall under other open-source licenses. Nothing from these build scripts ever reaches the final deliverable SQLite library, however, and so the licenses associated with those scripts should not be a factor in assessing your rights to copy and use the SQLite library.

All of the deliverable code in SQLite has been written from scratch. No code has been taken from other projects or from the open internet. Every line of code can be traced back to its original author, and all of those authors have public domain dedications on file. So the SQLite code base is clean and is uncontaminated with licensed code from other projects.

